import os
import requests
import matplotlib.pyplot as plt
import mysql.connector

# Initialize a dictionary to store results
results_summary = {
    "Security Headers Missing": 0,
    "SQL Injection Vulnerabilities": 0,
    "XSS Vulnerabilities": 0,
    "Exposed Files/Directories": 0
}

# Database connection setup
conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="",  # Add your MySQL password if applicable
    database="vulnerability_db"
)
cursor = conn.cursor()

# Define a function to save results to the database
def save_results(url):
    sql = """
        INSERT INTO url_results (url, security_headers_missing, sql_vulnerabilities, xss_vulnerabilities, exposed_files)
        VALUES (%s, %s, %s, %s, %s)
    """
    values = (
        url,
        results_summary["Security Headers Missing"],
        results_summary["SQL Injection Vulnerabilities"],
        results_summary["XSS Vulnerabilities"],
        results_summary["Exposed Files/Directories"]
    )
    cursor.execute(sql, values)
    conn.commit()
    print("\n[+] Results saved to the database.")

# Define a function to check security headers
def check_security_headers(url):
    if url.startswith("file://"):
        print("\n[!] Cannot check security headers for local files.")
        return

    try:
        response = requests.get(url)
        headers = response.headers

        print("\n[+] Checking Security Headers...")
        security_headers = {
            "Content-Security-Policy": "Content Security Policy",
            "X-XSS-Protection": "XSS Protection",
            "X-Frame-Options": "Frame Options",
            "X-Content-Type-Options": "Content Type Options",
            "Strict-Transport-Security": "HSTS (HTTPS Strict Transport Security)"
        }

        missing_headers = 0
        for header, desc in security_headers.items():
            if header in headers:
                print(f"    [+] {desc}: Present")
            else:
                print(f"    [-] {desc}: Missing")
                missing_headers += 1

        results_summary["Security Headers Missing"] += missing_headers
    except requests.exceptions.RequestException as e:
        print(f"[!] Error checking security headers: {e}")

# Define a function to test for SQL injection vulnerabilities
def sql_injection_test(url):
    if url.startswith("file://"):
        print("\n[!] SQL Injection test not applicable for local files.")
        return

    test_payload = "' OR '1'='1"
    try:
        response = requests.get(url + test_payload)
        if "sql" in response.text.lower() or "error" in response.text.lower():
            print("[!] Potential SQL Injection Vulnerability Detected!")
            results_summary["SQL Injection Vulnerabilities"] += 1
        else:
            print("[+] No SQL Injection vulnerability detected.")
    except requests.exceptions.RequestException as e:
        print(f"[!] Error during SQL Injection test: {e}")

# Define a function to test for XSS vulnerabilities
def xss_test(url):
    if url.startswith("file://"):
        print("\n[!] XSS test not applicable for local files.")
        return

    test_payload = "<script>alert('XSS')</script>"
    try:
        response = requests.get(url + test_payload)
        if test_payload in response.text:
            print("[!] Potential XSS Vulnerability Detected!")
            results_summary["XSS Vulnerabilities"] += 1
        else:
            print("[+] No XSS vulnerability detected.")
    except requests.exceptions.RequestException as e:
        print(f"[!] Error during XSS test: {e}")

# Define a function to scan for exposed files and directories
def scan_exposed_files(url):
    if url.startswith("file://"):
        print("\n[!] Scanning for exposed files not applicable for local files.")
        return

    print("\n[+] Scanning for common exposed files and directories...")
    common_files = ["robots.txt", ".env", "config.php", "admin", "backup", "phpinfo.php"]
    exposed_files = 0
    for file in common_files:
        full_url = f"{url}/{file}"
        try:
            response = requests.get(full_url)
            if response.status_code == 200:
                print(f"    [!] Exposed File/Directory Found: {file}")
                exposed_files += 1
            else:
                print(f"    [+] {file} - Not Found")
        except requests.exceptions.RequestException as e:
            print(f"[!] Error checking file: {file}, {e}")

    results_summary["Exposed Files/Directories"] += exposed_files

# Main function to assess website vulnerability
def vulnerability_assessment(url):
    print(f"\nStarting vulnerability assessment for: {url}")

    if url.startswith("file://"):
        local_path = url[7:]  # Remove 'file://' prefix
        if os.path.exists(local_path):
            print("\n[+] Local file detected. Displaying content:")
            with open(local_path, 'r', encoding='utf-8', errors='ignore') as f:
                print(f.read())
        else:
            print("[!] Local file not found.")
        return

    # Proceed with web vulnerability assessment
    check_security_headers(url)
    sql_injection_test(url)
    xss_test(url)
    scan_exposed_files(url)
    print("\n[+] Vulnerability Assessment Completed.\n")

# Function to generate a plot
def generate_plot():
    categories = list(results_summary.keys())
    values = list(results_summary.values())

    plt.figure(figsize=(10, 6))
    plt.bar(categories, values, color=['red', 'orange', 'yellow', 'blue'])
    plt.title("Vulnerability Assessment Results", fontsize=16)
    plt.xlabel("Vulnerability Types", fontsize=12)
    plt.ylabel("Number of Issues Found", fontsize=12)
    plt.xticks(rotation=45, ha="right")
    plt.tight_layout()
    plt.show()

# Function to print tips based on results
def print_tips():
    print("\n[!] Recommendations:")
    if results_summary["Security Headers Missing"] > 0:
        print("    - Implement missing security headers (e.g., Content-Security-Policy, X-Frame-Options, etc.).")
    if results_summary["SQL Injection Vulnerabilities"] > 0:
        print("    - Use parameterized queries to avoid SQL Injection.")
    if results_summary["XSS Vulnerabilities"] > 0:
        print("    - Sanitize inputs to prevent Cross-site Scripting (XSS) attacks.")
    if results_summary["Exposed Files/Directories"] > 0:
        print("    - Secure or remove exposed files and directories (e.g., robots.txt, .env, config.php).")
    if all(value == 0 for value in results_summary.values()):
        print("    - No vulnerabilities detected. Good job!")

# Enter the URL to assess
if __name__ == "__main__":
    target_url = input("Enter the URL of the website or local file path (e.g., https://example.com or file:///path/to/file): ")
    vulnerability_assessment(target_url)
    generate_plot()
    print_tips()
    save_results(target_url)  # Save results to the database

# Cleanup database connection
cursor.close()
conn.close()
